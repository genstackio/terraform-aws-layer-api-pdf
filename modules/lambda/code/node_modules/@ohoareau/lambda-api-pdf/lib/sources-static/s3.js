"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_1 = require("@ohoareau/aws");
const path_1 = require("path");
async function s3(ctx) {
    var _a;
    let { bucket: originalBucket, name, file = undefined } = ctx.query;
    const bucket = (((_a = ctx.config) === null || _a === void 0 ? void 0 : _a.static_buckets) || {})[originalBucket];
    if (!bucket)
        return undefined;
    const x = { bucket: originalBucket, key: name, ttl: 5 * 60 };
    if ('function' === typeof bucket) {
        const r = await bucket(ctx.query, ctx);
        if (!r)
            return undefined;
        Object.assign(x, r);
    }
    return {
        location: (await aws_1.s3.getFileViewUrl({
            ...x,
            contentType: 'application/pdf',
            name: file ? path_1.basename(file) : undefined,
        })).viewUrl,
    };
}
exports.s3 = s3;
exports.default = s3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc291cmNlcy1zdGF0aWMvczMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx1Q0FBMEM7QUFFMUMsK0JBQThCO0FBRXZCLEtBQUssVUFBVSxFQUFFLENBQUMsR0FBUTs7SUFDN0IsSUFBSSxFQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLElBQUksR0FBRyxTQUFTLEVBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBQ2pFLE1BQU0sTUFBTSxHQUFHLENBQUMsT0FBQSxHQUFHLENBQUMsTUFBTSwwQ0FBRSxjQUFjLEtBQUksRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbEUsSUFBSSxDQUFDLE1BQU07UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUM5QixNQUFNLENBQUMsR0FBRyxFQUFDLE1BQU0sRUFBRSxjQUFjLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBYyxDQUFDO0lBQ3hFLElBQUksVUFBVSxLQUFLLE9BQU8sTUFBTSxFQUFFO1FBQzlCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLENBQUM7WUFBRSxPQUFPLFNBQVMsQ0FBQztRQUN6QixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN2QjtJQUNELE9BQU87UUFDSCxRQUFRLEVBQUUsQ0FBQyxNQUFNLFFBQUssQ0FBQyxjQUFjLENBQUM7WUFDbEMsR0FBRyxDQUFDO1lBQ0osV0FBVyxFQUFFLGlCQUFpQjtZQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxlQUFRLENBQUMsSUFBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVM7U0FDcEQsQ0FBQyxDQUFDLENBQUMsT0FBTztLQUNkLENBQUE7QUFDTCxDQUFDO0FBakJELGdCQWlCQztBQUVELGtCQUFlLEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7czMgYXMgYXdzczN9IGZyb20gJ0BvaG9hcmVhdS9hd3MnO1xuaW1wb3J0IHtjdHh9IGZyb20gJ0BvaG9hcmVhdS9sYW1iZGEtdXRpbHMnO1xuaW1wb3J0IHtiYXNlbmFtZX0gZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzMyhjdHg6IGN0eCk6IFByb21pc2U8YW55fHVuZGVmaW5lZD4ge1xuICAgIGxldCB7YnVja2V0OiBvcmlnaW5hbEJ1Y2tldCwgbmFtZSwgZmlsZSA9IHVuZGVmaW5lZH0gPSBjdHgucXVlcnk7XG4gICAgY29uc3QgYnVja2V0ID0gKGN0eC5jb25maWc/LnN0YXRpY19idWNrZXRzIHx8IHt9KVtvcmlnaW5hbEJ1Y2tldF07XG4gICAgaWYgKCFidWNrZXQpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgeCA9IHtidWNrZXQ6IG9yaWdpbmFsQnVja2V0LCBrZXk6IG5hbWUsIHR0bDogNSAqIDYwIC8qIDUgbWluICovIH07XG4gICAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBidWNrZXQpIHtcbiAgICAgICAgY29uc3QgciA9IGF3YWl0IGJ1Y2tldChjdHgucXVlcnksIGN0eCk7XG4gICAgICAgIGlmICghcikgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih4LCByKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbG9jYXRpb246IChhd2FpdCBhd3NzMy5nZXRGaWxlVmlld1VybCh7XG4gICAgICAgICAgICAuLi54LFxuICAgICAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9wZGYnLFxuICAgICAgICAgICAgbmFtZTogZmlsZSA/IGJhc2VuYW1lKGZpbGUgYXMgc3RyaW5nKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSkpLnZpZXdVcmwsXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBzMyJdfQ==